## 167. Two Sum II - Input Array Is Sorted

#### Question

Given a **1-indexed** array of integers `numbers` that is already ***sorted in non-decreasing order\***, find two numbers such that they add up to a specific `target` number. Let these two numbers be `numbers[index1]` and `numbers[index2]` where `1 <= index1 < index2 < numbers.length`.

Return *the indices of the two numbers,* `index1` *and* `index2`*, **added by one** as an integer array* `[index1, index2]` *of length 2.*

The tests are generated such that there is **exactly one solution**. You **may not** use the same element twice.

Your solution must use only constant extra space.



#### Approach 1: Two Pointers

```java
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int l = 0;
        int r = numbers.length - 1;
        int[] arr = new int[2];
        while(l < r) {
            if(numbers[l] + numbers[r] > target) {
                r--;
            } else if(numbers[l] + numbers[r] < target) {
                l++;
            } else {
                arr[0] = l + 1;
                arr[1] = r + 1;
                return arr;
            }
        }
        return arr;
    }
}
```

**Reflection:**

Set two pointers (l and r) at the front and back correspondingly. 

Since the array given is already sorted, thus if numbers[l] + numbers[r] > target, meaning right pointer needs to move back (points to smaller value)

If numbers[l] + numbers[r] < target, meaning left pointer needs to move up (points to bigger value)

, we continue to do this until  numbers[l] + numbers[r] == target (the else branch), then return the values at the l and r pointer. Since the array is 1-indexed, so we add one onto the final results.

Time complexity is **`O(n)`**, as two pointers together only go over the array once.

